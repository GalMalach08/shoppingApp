{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIn = getIn;\nexports.default = void 0;\n\nvar _propertyExpr = require(\"property-expr\");\n\nlet trim = part => part.substr(0, part.length - 1).substr(1);\n\nfunction getIn(schema, path, value, context = value) {\n  let parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent,\n    parentPath: path,\n    schema\n  };\n  (0, _propertyExpr.forEach)(path, (_part, isBracket, isArray) => {\n    let part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context,\n      parent,\n      value\n    });\n\n    if (schema.innerType) {\n      let idx = isArray ? parseInt(part, 10) : 0;\n\n      if (value && idx >= value.length) {\n        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);\n      }\n\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: \"${schema._type}\")`);\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema,\n    parent,\n    parentPath: lastPart\n  };\n}\n\nconst reach = (obj, path, value, context) => getIn(obj, path, value, context).schema;\n\nvar _default = reach;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/מלאך גל/Desktop/ShoppingProject/client/node_modules/yup/lib/util/reach.js"],"names":["Object","defineProperty","exports","value","getIn","default","_propertyExpr","require","trim","part","substr","length","schema","path","context","parent","lastPart","lastPartDebug","parentPath","forEach","_part","isBracket","isArray","resolve","innerType","idx","parseInt","Error","fields","_type","reach","obj","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIn = getIn;\nexports.default = void 0;\n\nvar _propertyExpr = require(\"property-expr\");\n\nlet trim = part => part.substr(0, part.length - 1).substr(1);\n\nfunction getIn(schema, path, value, context = value) {\n  let parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent,\n    parentPath: path,\n    schema\n  };\n  (0, _propertyExpr.forEach)(path, (_part, isBracket, isArray) => {\n    let part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context,\n      parent,\n      value\n    });\n\n    if (schema.innerType) {\n      let idx = isArray ? parseInt(part, 10) : 0;\n\n      if (value && idx >= value.length) {\n        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);\n      }\n\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: \"${schema._type}\")`);\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema,\n    parent,\n    parentPath: lastPart\n  };\n}\n\nconst reach = (obj, path, value, context) => getIn(obj, path, value, context).schema;\n\nvar _default = reach;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}